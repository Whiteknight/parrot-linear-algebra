#! parrot-nqp

INIT {
    pir::load_bytecode('parrot_test_xunit.pbc');
    pir::load_bytecode('t/testlib/pla_test.pbc');
    pir::loadlib__ps('os');
}

my $harness := PLA::Harness.new();
$harness.initialize();

# First run the sanity tests. The sanity tests load the dynamic library, which
# is required for everything else. Don't attempt to run any other tests if the
# sanity test fails
$harness.setup('t');
$harness.run();
if ($harness.success()) {
    $harness.setup(
        't/pmc',
        't/methods/nummatrix2d',
        't/methods/complexmatrix2d',
        't/methods/pmcmatrix2d',
        't/pir-subclass'
    );
    $harness.run();
}
$harness.show_results();

class PLA::Harness {
    has $!total_passed;
    has $!total_failed;
    has $!total_files;
    has @!aborted_files;
    has %!results;
    has @!files;
    has $!max_length;
    has $!os;

# TAP grammar in ABNF
# http://testanything.org/wiki/index.php/TAP_at_IETF:_Draft_Standard#Grammar
# TODO:
# verbose mode
    method initialize() {
        $!total_passed := 0;
        $!total_failed := 0;
        @!aborted_files := [];
        $!total_files := 0;
        %!results := self.new_hash();
        %!results{"PASSED"} := [];
        %!results{"FAILED"} := [];
        %!results{"ABORTED"} := [];
        $!os := pir::new__PS('OS');
    }

    method setup(*@dirs) {
        @!files := [];
        self.get_all_tests(@dirs);
        $!total_files := $!total_files + +@!files;
    }

    method new_hash(*%hash) {
        return %hash;
    }

    method run () {
        for @!files {
            my $test := $_;
            $test.setup();
            $test.print_filename($!max_length);
            $test.run();
            $test.print_result();
            my $status := $test.status();
            %!results{$status}.push($test);
            if $status ne "ABORTED" {
                $!total_passed := $!total_passed + $test.passed_tests();
                $!total_failed := $!total_failed + $test.failed_tests();
            }
            self.reset_test_environment();
        }
    }

    method success() {
        my $aborted := +%!results{"ABORTED"};
        if $aborted || $!total_failed {
            return 0;
        }
        else {
            return 1;
        }
    }

    method show_results() {
        my $aborted := +%!results{"ABORTED"};
        if $aborted || $!total_failed {
            self.print("Result: FAILED");
        } else {
            self.print(
                "Result: PASSED",
                "\tPassed $!total_passed tests in $!total_files files"
            );
        }
        if $aborted {
            self.print(
                "\tFailed $aborted files due to premature exit",
                "\tList of failed files:"
            );
            for %!results{"ABORTED"} {
                my $abort := $_.get_filename();
                self.print("\t\t$abort");
            }
        }
        if $!total_failed {
            self.print(
                "\tFailed $!total_failed tests in " ~ +(%!results{"FAILED"}) ~ " files",
                "\tPassed $!total_passed tests in $!total_files files",
                "",
                "\tList of failed tests:"
            );
            for %!results{"FAILED"} {
                my $test := $_;
                pir::say("\t\t" ~ $test.get_filename());
                for $test.list_of_failures() {
                    my $failure := $_;
                    pir::say("\t\t\t$failure");
                }
            }
        }
    }

    method print(*@lines) {
        for @lines {
            pir::say($_);
        }
    }

    method get_dir_contents($path) {
        my $contents;

        #if self.is_file: $path {
        #    %named<mode> := 'r';
        #    my $fh := self.open($path, |%named);
        #    $contents := $fh.readall;
        #    $fh.close;
        #}
        #elsif self.is_directory: $path {
            $contents := $!os.readdir: ~$path;
        #}
        #else {
            # What to do?
            #pir::die("Don't know how to get contents of non-file, non-directory: $path");
        #}

        $contents;
    }

    method get_all_tests(@dirs) {
        my $max_length := 0;
        for @dirs {
            my $dir := $_;
            my @rawfiles := self.get_dir_contents($dir);
            for @rawfiles {
                my $filename := $_;
                if pir::index__ISS($filename, ".t") == -1 {
                    next;
                }
                if pir::index__ISS($filename, ".OLD") != -1 {
                    next;
                }

                $filename := "$dir/$filename";
                my $testobj := PLA::Harness::Test.new();
                $testobj.set_filename($filename);
                @!files.push($testobj);
                my $length := pir::length__IS($filename);
                if $length > $!max_length {
                    $!max_length := $length;
                }
            }
        }
    }

    method reset_test_environment() {
        # TODO: This is an evil hack. Test::Builder doesn't clean up it's environment
        #       so when I try to run multiple tests in a single program instance
        #       it breaks. When Test::Builder gets fixed, remove this nonsense
        Q:PIR {
            $P0 = new "Undef"
            set_hll_global [ 'Test'; 'Builder'; '_singleton' ], 'singleton', $P0
        };
    }
}

class PLA::Harness::Test {
    has $!filename;
    has $!result;
    has $!errdetails;
    has $!status;
    has @!failures;
    has @!lines;
    has $!num_tests;
    has $!failed_tests;
    has $!passed_tests;

    method setup() {
        $!failed_tests := 0;
        $!passed_tests := 0;
        @!failures := [];
    }

    method total_tests() {
        return $!num_tests;
    }

    method failed_tests() {
        return $!failed_tests;
    }

    method passed_tests() {
        return $!passed_tests;
    }

    method list_of_failures() {
        return @!failures;
    }

    method set_filename($filename) {
        $!filename := $filename;
    }

    method get_filename() {
        return $!filename;
    }

    method print_result() {
        if $!result {
            pir::say("not ok ($!result)");
        } else {
            pir::say("ok");
        }
    }

    method status() {
        return $!status;
    }

    method is_pir_test() {
        my $idx := pir::index__ISS($!filename, 't/pir');
        if $idx == 0 {
            return 1;
        }
        return 0;
    }

    method print_filename($max_length) {
        my $length := pir::length__IS($!filename);
        my $diff := ($max_length - $length) + 3;
        my $elipses := pir::repeat__SSI('.', $diff);
        print($!filename ~ " " ~ $elipses ~ " ");
    }

    method compile_pir_test() {
        my $sub;
        my $filename := $!filename;
         Q:PIR {
            $P1 = find_lex "$filename"
            $P0 = new ['FileHandle']
            $P0.'open'($P1)
            $P2 = $P0.'readall'()
            $P0.'close'()
            $P3 = compreg 'PIR'
            $P4 = $P3($P2)
            $P4 = $P4[0]
            store_lex '$sub', $P4
        };
        return $sub;
    }

    method compile_nqp_test() {
        my $sub := Nqp::compile_file($!filename);
        return $sub[0];
    }

    method compile_and_execute() {
        my $sub;
        my $pirfile := self.is_pir_test();
        if $pirfile == 0 {
            $sub := self.compile_nqp_test();
        } else {
            $sub := self.compile_pir_test();
        }
        my $stdout := Parrot::new("StringHandle");
        $stdout.open("blah", "rw");
        my %save_handles := Program::swap_handles(:stdout($stdout), :stderr($stdout));
        try {
            $sub();
            CATCH {
                $!result := "aborted prematurely";
                $!errdetails := $!;
                $!status := "ABORTED";
            }
        }
        my $output := $stdout.readall();
        Program::swap_handles(|%save_handles);
        @!lines := $output.split("\n");
    }

    method run() {
        self.compile_and_execute();
        if $!status ne "ABORTED" {
            self.get_plan();
            self.parse();
        }
    }

    method get_plan() {
        # TODO: Detect bad plan
        my $plan        := @!lines[0];
        my @plan_parts  := $plan.split('..');
        my $!num_tests  := @plan_parts[1];
        @!lines.shift;
    }

    method parse() {
        for @!lines {
            my $line := $_;
            if $line {
                my $lineobj := PLA::Harness::Line.new();
                $lineobj.set_line($line);
                if $lineobj.ignore() {
                    continue;
                }
                elsif $lineobj.success() {
                    $!passed_tests := $!passed_tests + 1;
                }
                else {
                    $!failed_tests := $!failed_tests + 1;
                    my $msg := "test " ~ $lineobj.number();
                    my $name := $lineobj.name();
                    if $name {
                        $msg := $msg ~ " : $name";
                    }
                    @!failures.push($msg);
                }
            }
        }
        if $!failed_tests {
            $!result := "Failed $!failed_tests / $!num_tests";
            $!status := "FAILED";
        }
        else {
            $!status := "PASSED";
        }
    }
}

class PLA::Harness::Line {
    has $!result;
    has $!number;
    has $!name;
    has $!comment;
    has $!ignore;

    method set_line($line) {
        my $idx := pir::index__ISS($line, "ok");
        if $idx != 0 && $idx != 4 {
            $!ignore := 1;
            return;
        } else {
            $!ignore := 0;
            my @line_parts := $line.split("ok ");
            if @line_parts[0] eq 'not ' {
                $!result := 0;
                $!name := $line.split(' - ')[1];
            }
            else {
                $!result := 1;
            }
            $!number := @line_parts[1].split(' ')[0];
        }
    }

    method ignore() {
        return $!ignore;
    }

    method success() {
        return $!result;
    }

    method number() {
        return $!number;
    }

    method name() {
        return $!name;
    }
}
