#include "pla.h"

#define ALLOCATE_STORAGE(s) (char *)mem_sys_allocate_zeroed(s * sizeof (char))

/* Resize the matrix internal storage to be able to hold a point at position
   (rows, cols). The matrix grows but does not shrink. New spaces in the matrix
   are initialized to 0.0. Parameters rows and cols are the indices that are trying
   to be accessed, so we must resize the matrix to be able to accomodate those
   indices. Notice that the matrix type is zero-indexed, so the size is one
   plus the highest index that we need to access.

   This function will not shrink the matrix, only grow it. After the call,
   the matrix will be at least large enough to hold an item at the given
   index. To shrink the matrix, use the get_block() method, or that
   algorithm. */
static void
resize_matrix(PARROT_INTERP, PMC * self, INTVAL rows, INTVAL cols)
{
    Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(self);
    /* Store the old values */
    const INTVAL old_rows = attrs->rows;
    const INTVAL old_cols = attrs->cols;
    char * old_s = attrs->storage;

    /* rows and cols are indices, not sizes. Resize the matrix to accomodate this
       new point without shrinking by taking the max. */
    const INTVAL new_rows = INDEX_MAX(old_rows, rows + 1);
    const INTVAL new_cols = INDEX_MAX(old_cols, cols + 1);
    const INTVAL newsize = new_rows * new_cols;
    char * new_s = ALLOCATE_STORAGE(newsize);

    INTVAL i, j;
    memset(new_s, ' ', newsize);
    for (i = 0; i < old_rows; i++) {
        for (j = 0; j < old_cols; j++) {
            ITEM_XY_COLMAJOR(new_s, new_rows, new_cols, i, j) =
                ITEM_XY_COLMAJOR(old_s, old_rows, old_cols, i, j);
        }
    }
    attrs->storage = new_s;
    attrs->rows = new_rows;
    attrs->cols = new_cols;
    if (old_s)
        mem_sys_free(old_s);
}

static STRING *
get_string_from_row(PARROT_INTERP, char * s, INTVAL cols, INTVAL row)
{
    char * const rowstart = &(s[cols * row]);
    STRING * const str = Parrot_str_new(interp, rowstart, cols);
    return str;
}

static INTVAL
insert_string_at_row_offset(PARROT_INTERP, PMC * self, INTVAL row, INTVAL offset, STRING * str)
{
    Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(self);
    char * const cstr = Parrot_str_to_cstring(interp, str);
    const INTVAL length = strlen(cstr);
    INTVAL y_size, rows_size, i;
    resize_matrix(interp, self, offset + length - 1, row);
    rows_size = attrs->rows;
    y_size = attrs->cols;
    for (i = 0; i < length; i++)
        ITEM_XY_COLMAJOR(attrs->storage, rows_size, y_size, offset + i, row) = cstr[i];
    for (i = length + offset; i < y_size; i++)
        ITEM_XY_COLMAJOR(attrs->storage, rows_size, y_size, i, row) = ' ';
    Parrot_str_free_cstring(cstr);
    return length;
}

pmclass CharMatrix2D dynpmc auto_attrs provides matrix {
    ATTR char * storage;
    ATTR INTVAL rows;
    ATTR INTVAL cols;
    ATTR INTVAL flags;

/*

=head1 VTABLEs

=over 4

=item* init

=cut

*/

    VTABLE void init() {
        Parrot_CharMatrix2D_attributes * const a = PARROT_CHARMATRIX2D(SELF);
        a->storage = NULL;
        a->rows = 0;
        a->cols = 0;
        a->flags = 0;
        PObj_custom_destroy_SET(SELF);
    }

    VTABLE void destroy() {
        Parrot_CharMatrix2D_attributes * const a = PARROT_CHARMATRIX2D(SELF);
        char * const s = a->storage;
        if (s)
            mem_sys_free(s);
    }

/*
=item* get_string_keyed_int

Returns the string at row N

=cut

*/

    VTABLE STRING * get_string_keyed_int(INTVAL key) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        const INTVAL x_size = attrs->rows;
        const INTVAL y_size = attrs->cols;
        if (key >= y_size)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_OUT_OF_BOUNDS,
                "CharMatrix2D: Attempt to access non-existant row");
        else
            return get_string_from_row(INTERP, attrs->storage, x_size, key);
    }

/*

=item* set_integer_keyed

Sets the character value at coordinates rows,cols

=cut

*/

    VTABLE void set_integer_keyed(PMC * key, INTVAL value) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        INTVAL rows, cols, x_size = attrs->rows, y_size = attrs->cols;
        GET_KEY_INDICES_ROWMAJOR(INTERP, x_size, y_size, key, rows, cols);
        if (rows >= x_size || cols >= y_size) {
            resize_matrix(INTERP, SELF, rows, cols);
            x_size = attrs->rows;
            y_size = attrs->cols;
        }
        ITEM_XY_COLMAJOR(attrs->storage, x_size, y_size, rows, cols) = (char)value;
    }

    VTABLE void set_integer_keyed_int(INTVAL key, INTVAL value) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        attrs->storage[key] = (char)value;
    }

    VTABLE void set_number_keyed(PMC * key, FLOATVAL value) {
        const INTVAL v = (INTVAL)value;
        VTABLE_set_integer_keyed(INTERP, SELF, key, v);
    }

    VTABLE void set_number_keyed_int(INTVAL key, FLOATVAL value) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        const INTVAL v = (INTVAL)value;
        attrs->storage[key] = (char)v;
    }

    VTABLE void set_string_keyed(PMC * key, STRING * value) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        const INTVAL x_size = attrs->rows;
        const INTVAL y_size = attrs->cols;
        INTVAL rows, cols;
        GET_KEY_INDICES_ROWMAJOR(INTERP, x_size, y_size, key, rows, cols);
        insert_string_at_row_offset(INTERP, SELF, cols, rows, value);
    }

    VTABLE void set_string_keyed_int(INTVAL key, STRING * str) {
        insert_string_at_row_offset(INTERP, SELF, key, 0, str);
    }

    VTABLE void set_pmc_keyed(PMC * key, PMC * value) {
        STRING * const s = VTABLE_get_string(INTERP, value);
        VTABLE_set_string_keyed(INTERP, SELF, key, s);
    }

    VTABLE void set_pmc_keyed_int(INTVAL key, PMC *value) {
        STRING * const s = VTABLE_get_string(INTERP, value);
        VTABLE_set_string_keyed_int(INTERP, SELF, key, s);
    }

/*

=item* get_string

=cut

*/

    VTABLE STRING *get_string() {
        INTVAL i;
        PMC * const builder = Parrot_pmc_new(INTERP, enum_class_StringBuilder);
        STRING * const newline = Parrot_str_new(INTERP, "\n", 1);
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        char * const s = attrs->storage;
        const INTVAL x_size = attrs->rows;
        const INTVAL y_size = attrs->cols;

        for (i = 0; i < y_size; i++) {
            STRING * const row = get_string_from_row(INTERP, s, x_size, i);
            VTABLE_push_string(INTERP, builder, row);
            VTABLE_push_string(INTERP, builder, newline);
        }
        return VTABLE_get_string(INTERP, builder);
    }

    VTABLE PMC * get_attr_str(STRING * idx) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        if (Parrot_str_equal(INTERP, idx, CONST_STRING(INTERP, "cols"))) {
            PMC * const cols = Parrot_pmc_new(INTERP, enum_class_Integer);
            VTABLE_set_integer_native(INTERP, cols, attrs->cols);
            return cols;
        }
        else if (Parrot_str_equal(INTERP, idx, CONST_STRING(INTERP, "rows"))) {
            PMC * const rows = Parrot_pmc_new(INTERP, enum_class_Integer);
            VTABLE_set_integer_native(INTERP, rows, attrs->rows);
            return rows;
        }
        else if (Parrot_str_equal(INTERP, idx, CONST_STRING(INTERP, "size"))) {
            PMC * const size = Parrot_pmc_new(INTERP, enum_class_Integer);
            VTABLE_set_integer_native(INTERP, size, attrs->cols * attrs->rows);
            return size;
        }
        return PMCNULL;
    }

    VTABLE PMC * clone() {
        PMC * const c = Parrot_pmc_new(INTERP, SELF->vtable->base_type);
        Parrot_CharMatrix2D_attributes * const old_atts = PARROT_CHARMATRIX2D(SELF);
        Parrot_CharMatrix2D_attributes * const new_atts = PARROT_CHARMATRIX2D(c);
        INTVAL rows, cols;
        INTVAL const x_size = old_atts->rows;
        INTVAL const y_size = old_atts->cols;
        INTVAL const newsize = x_size * y_size;
        char * const old_s = old_atts->storage;
        char * const new_s = ALLOCATE_STORAGE(newsize);
        for (rows = 0; rows < x_size; ++rows) {
            for (cols = 0; cols < y_size; ++cols) {
                ITEM_XY_COLMAJOR(new_s, x_size, y_size, rows, cols) =
                    ITEM_XY_COLMAJOR(old_s, x_size, y_size, rows, cols);
            }
        }
        new_atts->storage = new_s;
        new_atts->flags = old_atts->flags;
        new_atts->rows = x_size;
        new_atts->cols = y_size;
        return c;
    }

    VTABLE INTVAL is_equal(PMC * other) {
        if (other->vtable->base_type == SELF->vtable->base_type) {
            Parrot_CharMatrix2D_attributes * const self_attrs = PARROT_CHARMATRIX2D(SELF);
            Parrot_CharMatrix2D_attributes * const other_attrs = PARROT_CHARMATRIX2D(other);
            const INTVAL self_rows = self_attrs->rows;
            const INTVAL self_cols = self_attrs->cols;
            const INTVAL other_rows = other_attrs->rows;
            const INTVAL other_cols = other_attrs->cols;
            char * const self_s = self_attrs->storage;
            char * const other_s = other_attrs->storage;
            INTVAL rows, cols;

            if (self_rows != other_rows || self_cols != other_cols)
                return 0;

            for (cols = 0; cols < self_cols; cols++) {
                for (rows = 0; rows < self_rows; rows++) {
                    const char self_value =
                        ITEM_XY_ROWMAJOR(self_s, self_rows, self_cols, rows, cols);
                    const char other_value =
                        ITEM_XY_ROWMAJOR(other_s, other_rows, other_cols, rows, cols);
                    if (self_value != other_value)
                        return 0;
                }
            }
            return 1;
        }
        return 0;
    }


/*

=back

=head1 METHODS

=over 4

*/
/*

=item resize()

=cut

*/

    METHOD resize(INTVAL new_rows, INTVAL new_cols) {
        resize_matrix(INTERP, SELF, new_rows - 1, new_cols - 1);
    }

/*

=item fill()

Fill the matrix with a single value. if sizes are provided, fill to those
sizes, growing the matrix if needed.

=cut

*/

    METHOD fill(INTVAL value,
                INTVAL x_size :optional, INTVAL has_rows_size :opt_flag,
                INTVAL y_size :optional, INTVAL has_cols_size :opt_flag
               ) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        const char v = (char)value;
        char * s  = attrs->storage;
        INTVAL const curr_rows_size = attrs->rows;
        INTVAL const curr_cols_size = attrs->cols;
        INTVAL rows, cols;

        if (!has_rows_size)
            x_size = curr_rows_size;
        if (!has_cols_size)
            y_size = curr_cols_size;

        if ((has_rows_size && x_size > curr_rows_size) ||
            (has_cols_size && y_size > curr_cols_size)) {
            resize_matrix(INTERP, SELF, x_size - 1, y_size - 1);
            s = attrs->storage;
        }

        for (rows = 0; rows < x_size; ++rows) {
            for (cols = 0; cols < y_size; ++cols) {
                ITEM_XY_ROWMAJOR(s, x_size, y_size, rows, cols) = v;
            }
        }
    }

    METHOD initialize_from_mixed_array(INTVAL row, PMC * array) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        INTVAL i = 0;
        PMC * iter = Parrot_pmc_new_init(INTERP, enum_class_ArrayIterator, array);
        while (VTABLE_get_bool(INTERP, iter)) {
            INTVAL const x_size = attrs->rows;
            INTVAL const y_size = attrs->cols;
            PMC * const item = VTABLE_shift_pmc(INTERP, iter);
            switch(item->vtable->base_type) {
                case enum_class_Float: {
                    const FLOATVAL value = VTABLE_get_number(INTERP, item);
                    const INTVAL idx = INDEX_XY_COLMAJOR(x_size, y_size, i, row);
                    resize_matrix(INTERP, SELF, i, row);
                    VTABLE_set_number_keyed_int(INTERP, SELF, idx, value);
                    i++;
                    break;
                }
                case enum_class_String: {
                    STRING * const value = VTABLE_get_string(INTERP, item);
                    i += insert_string_at_row_offset(INTERP, SELF, row, i, value);
                    break;
                }
                case enum_class_Integer:
                default: {
                    const INTVAL value = VTABLE_get_integer(INTERP, item);
                    const INTVAL idx = INDEX_XY_COLMAJOR(x_size, y_size, i, row);
                    resize_matrix(INTERP, SELF, i, row);
                    VTABLE_set_integer_keyed_int(INTERP, SELF, idx, value);
                    i++;
                    break;
                }
            }
        }
    }

/*

=item iterate_function_inplace()

Calls a function for every element in the array, replacing the current
value with the return value of the called function.

=cut

*/

    METHOD iterate_function_inplace(PMC * func, PMC * args :slurpy) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        const INTVAL rows_size = attrs->rows;
        const INTVAL cols_size = attrs->cols;
        const INTVAL newsize = rows_size * cols_size;
        char * old_s = attrs->storage;
        char * new_s = ALLOCATE_STORAGE(newsize);
        INTVAL row, col;

        if (newsize == 0 || old_s == NULL)
            RETURN();

        for (row = 0; row < rows_size; row++) {
            for (col = 0; col < cols_size; col++) {
                const INTVAL value = ITEM_XY_ROWMAJOR(old_s, rows_size, cols_size, row, col);
                INTVAL result = 0.0;
                Parrot_ext_call(INTERP, func, "PIIIPf->I", SELF, value, row, col, args, &result);
                ITEM_XY_ROWMAJOR(new_s, rows_size, cols_size, row, col) = (char)result;
            }
        }
        attrs->storage = new_s;
        if (old_s)
            free(old_s);
    }

    METHOD iterate_function_external(PMC * func, PMC * args :slurpy) {
        Parrot_CharMatrix2D_attributes * const attrs = PARROT_CHARMATRIX2D(SELF);
        PMC * const new_matrix = Parrot_pmc_new(INTERP, SELF->vtable->base_type);
        Parrot_CharMatrix2D_attributes * new_attrs;
        const INTVAL rows_size = attrs->rows;
        const INTVAL cols_size = attrs->cols;
        const INTVAL newsize = rows_size * cols_size;
        char * const self_s = attrs->storage;
        char * new_s;
        INTVAL col, row;

        if (newsize == 0 || self_s == NULL)
            RETURN(PMC * new_matrix);

        resize_matrix(INTERP, new_matrix, rows_size - 1, cols_size - 1);
        new_attrs = PARROT_CHARMATRIX2D(new_matrix);
        new_s = new_attrs->storage;

        for (row = 0; row < rows_size; row++) {
            for (col = 0; col < cols_size; col++) {
                INTVAL value = ITEM_XY_ROWMAJOR(self_s, rows_size, cols_size, row, col);
                INTVAL result = 0.0;
                Parrot_ext_call(INTERP, func, "PIIIPf->I", SELF, value, row, col, args, &result);
                ITEM_XY_ROWMAJOR(new_s, rows_size, cols_size, row, col) = (char)result;
            }
        }
        RETURN(PMC * new_matrix);
    }

/*

=back

=end

*/
}

